<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyverse on A minimal Hugo website</title>
    <link>/tags/tidyverse/</link>
    <description>Recent content in tidyverse on A minimal Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iterating with names</title>
      <link>/2018/12/19/iterating-with-names/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/19/iterating-with-names/</guid>
      <description>title: ‘Iterating with names’  author: ’’  date: ‘2018-12-19’  slug: iterating-with-names  categories: [  ‘R’  ]  tags: [‘tidyverse’, ‘purrr’]  type: post    The Problem I’ve come across this problem a few times lately, when I’ve wanted to iterate through some sort of named list or vector, and use both the name and value in each iteration.
To illustrate, here’s a vector, which I have creatively named myvec.</description>
    </item>
    
    <item>
      <title>Scraping rstudio::conf 2018 Abstracts</title>
      <link>/2018/08/22/scraping-rstudio-conf-2018-abstracts/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/22/scraping-rstudio-conf-2018-abstracts/</guid>
      <description>RStudio Conference 2019 takes place in January 2019, and this week RStudio put out a call for contributed talks and e-posters. Though I was eager to browse previous years’ abstracts for inspiration, I couldn’t find them all in one place, and so I decided to use one of my favourite R packages, rvest, to do some web scraping to grab the content.
My main aim was to find all of the abstracts for the contributed talks only from 2018.</description>
    </item>
    
    <item>
      <title>How do I make my own dplyr-style functions?</title>
      <link>/2018/04/16/how-do-i-make-my-own-dplyr-style-functions/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/16/how-do-i-make-my-own-dplyr-style-functions/</guid>
      <description>In this series of blog posts introducing tidy eval, we’ve been looking at why tidy eval is important, and terms like “quotation” and “quasiquotation”.
The next step is to look at how we can write our own dplyr-style functions in R.
This post will look at the following terms and functions:
 quosures quo() enquo()  What is a quosure? Quosures are a topic which come up frequently when talking about tidy eval.</description>
    </item>
    
    <item>
      <title>What the heck is quasiquotation?</title>
      <link>/2018/03/31/what-the-heck-is-quasiquotation/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/31/what-the-heck-is-quasiquotation/</guid>
      <description>In a previous entry, I introduced the concept of tidy eval. If you’re completely new to tidy eval and haven’t read that post yet, I’d suggest you go back to it before continuing, as this post will build upon the concepts I discussed there.
To recap, tidy eval refers to the ‘special’ type of evaluation used by dplyr functions. Whereas in base R, you have to refer the data frame in question if you want to returns particular rows, this is not the case with dplyr functions.</description>
    </item>
    
    <item>
      <title>What is tidy eval and why should I care?</title>
      <link>/2018/03/29/what-is-tidy-eval-and-why-should-i-care/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/29/what-is-tidy-eval-and-why-should-i-care/</guid>
      <description>I’m going to begin this post somewhat backwards, and start with the conclusion: tidy eval is important to anyone who writes R functions and uses dplyr and/or tidyr.
I’m going to load a couple of packages, and then show you exactly why.
library(dplyr) library(rlang) Data wrangling with base R Here’s an example function I have written in base R. Its purpose is to take a data set, and extract values from a single column that match a specific value, with both input and output both being in data frame format.</description>
    </item>
    
  </channel>
</rss>
