<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dplyr on A minimal Hugo website</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in dplyr on A minimal Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How do I make my own dplyr-style functions?</title>
      <link>/2018/04/16/how-do-i-make-my-own-dplyr-style-functions/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/16/how-do-i-make-my-own-dplyr-style-functions/</guid>
      <description>In this series of blog posts introducing tidy eval, we’ve been looking at why tidy eval is important, and terms like “quotation” and “quasiquotation”.
The next step is to look at how we can write our own dplyr-style functions in R.
This post will look at the following terms and functions:
 quosures quo() enquo()  What is a quosure? Quosures are a topic which come up frequently when talking about tidy eval.</description>
    </item>
    
    <item>
      <title>What the heck is quasiquotation?</title>
      <link>/2018/03/31/what-the-heck-is-quasiquotation/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/31/what-the-heck-is-quasiquotation/</guid>
      <description>In a previous entry, I introduced the concept of tidy eval. If you’re completely new to tidy eval and haven’t read that post yet, I’d suggest you go back to it before continuing, as this post will build upon the concepts I discussed there.
To recap, tidy eval refers to the ‘special’ type of evaluation used by dplyr functions. Whereas in base R, you have to refer the data frame in question if you want to returns particular rows, this is not the case with dplyr functions.</description>
    </item>
    
    <item>
      <title>What is tidy eval and why should I care?</title>
      <link>/2018/03/29/what-is-tidy-eval-and-why-should-i-care/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/29/what-is-tidy-eval-and-why-should-i-care/</guid>
      <description>I’m going to begin this post somewhat backwards, and start with the conclusion: tidy eval is important to anyone who writes R functions and uses dplyr and/or tidyr.
I’m going to load a couple of packages, and then show you exactly why.
library(dplyr) library(rlang) Data wrangling with base R Here’s an example function I have written in base R. Its purpose is to take a data set, and extract values from a single column that match a specific value, with both input and output both being in data frame format.</description>
    </item>
    
    <item>
      <title>Using Tidy Eval with dplyr::filter</title>
      <link>/2018/03/27/using-tidy-eval-with-dplyr-filter/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/27/using-tidy-eval-with-dplyr-filter/</guid>
      <description>I previously blogged about using tidy eval with dplyr::mutate, and found that post handy to refer back to. I still haven’t got round to having an in-depth look at the principles of tidy eval, so instead I’m continuing to explore problems as and when they come up. In this post, I’ll be taking a look at using tidy eval with dplyr::filter. Once again, I’ll be using the iris dataset to create examples that should be simple to follow.</description>
    </item>
    
    <item>
      <title>Exploring Tidy Eval at a Snail&#39;s Pace</title>
      <link>/2018/02/20/exploring-tidy-eval-snails-pace/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/20/exploring-tidy-eval-snails-pace/</guid>
      <description>I recently attended rstudio::conf, with my favourite talks being those which taught me new things that I am going to use in my day-to-day work. I attended and enjoyed Hadley Wickham’s talk, ‘Tidy eval: programming with dplyr, tidyr, and ggplot2’, although got sidetracked trying to keep up typing whilst listening.
When I’m delivering training courses, this is the one thing I advise all attendees not to do - it’s so easy to miss important points whilst running code.</description>
    </item>
    
  </channel>
</rss>
